# vim: ft=make
# makecmdgoals framework: build directory cleaning
# copyright (c) 2018 Mikhail Usenko <michaelus@tochka.ru>


# don't try to rebuild this makefile
[clean.makecmdgoals] := $(lastword $(MAKEFILE_LIST))
$([clean.makecmdgoals]):: ;


# use common definitions
include $(join $(dir $([clean.makecmdgoals])),framework.defs)
$(call !trace!,$$(\)[$$($${})],[clean.makecmdgoals])


# no default goal
# (define it with recursively expanded assignment from any empty variable)
.DEFAULT_GOAL = $@
.PHONY: $(MAKECMDGOALS)


{BUILD_DIRS} = $(sort $(dir $(call !BUILD-PATHNAME!,$(MAKECMDGOALS))))
$({BUILD_DIRS}): ;


.PHONY: clean
clean: $({BUILD_DIRS})
	$(foreach _,$^,\
	$(info $(\) *** ($@: '$_'))\
	$(if $(filter-out $(realpath $(BUILD_ROOT))/%,$(realpath $_)/),\
		$(warning The rule ($@: '$_') for the path being not under the BUILD_ROOT='$(BUILD_ROOT)' is discarded.),\
		$(if $(call !is-equal!,$(realpath $(ROOT)),$(realpath $_)),\
			$(warning The rule ($@: '$_') for the path being the same as the ROOT='$(ROOT)' is discarded.),\
			test "$$(realpath -e '$_')" != "/" && \
			test "$$(realpath -e '$_')" != "//" && \
			rm -vrf '$_'/*)))


# do clean the build directories
{MAKECMDGOALS} = $(filter-out clean,$(MAKECMDGOALS))
ifneq ($({MAKECMDGOALS}),)
$({MAKECMDGOALS}): clean ;
endif

