# vim: ft=make
# makecmdgoals framework: object compiling
# copyright (c) 2018 Mikhail Usenko <michaelus@tochka.ru>


# don't try to rebuild this makefile
[compile.makecmdgoals] := $(lastword $(MAKEFILE_LIST))
$([compile.makecmdgoals]):: ;


# use common definitions
include $(join $(dir $([compile.makecmdgoals])),framework.defs)
$(call !trace!,$$(\)[$$($${})],[compile.makecmdgoals])


# no default goal
# (define it with recursively expanded assignment from any empty variable)
.DEFAULT_GOAL = $@
.PHONY: $(MAKECMDGOALS)


{COMPILE_COMMAND} = $({CXX_COMMAND})  -c


# (the rules emitted by CXX dependency generation) <- ((source files),(targets the dependencies being intended for))
# note:
# 	$(foreach {source-file},...) is used as far as $(shell ...) replaces LF/CR-LF in the command output with a space
# 	char that might lead to a wrong result if there are multiple source files at once being passed with '-MM' option
define !CXX-MM-MT! =
$(subst $(\)$(_),$(\),$(foreach \
	{source-file},$1,$(subst \,,$(shell \
		$({CXX}) $({CXXSTD}) $({CPPFLAGS}) $({IFLAGS}) \
			-MM '$({source-file})' $(addprefix -MT ,$(call !quote-words!,',$2))))$(\)))
endef


# (the rule of the target prerequisites) <- ((target file),(source file))
define !TARGET-PREREQUISITES! =
$(subst $(\),$(if $(call !realpath-failure!,$(dir $1)), | $(dir $1))$(\),$(call !CXX-MM-MT!,$2,$1))
endef


$(call !trace!,$${}={$$($${})},{SOURCES})
#########################################
ifneq ($({SOURCES}),)


$(call !trace!,$${}={$$($${})},{OBJECTS})


{OBJECT_PREREQUISITES} = $(call !map2!,$(\),!TARGET-PREREQUISITES!,$({OBJECTS}),$({SOURCES}))$(\)
$(call !trace!,$${}={$$($${})},{OBJECT_PREREQUISITES})


$(eval $({OBJECT_PREREQUISITES}))


$(sort $(dir $({OBJECTS}))):
	mkdir -p '$@'


$({OBJECTS}): $(MAKEFILE_LIST)
$({OBJECTS}):
	$(info $(\) *** ($@: $^))
	$({COMPILE_COMMAND}) '$(filter $({SOURCES}),$^)'  -o '$@'


# do compile the object files
{MAKECMDGOALS} = $(filter-out $({OBJECTS}),$(MAKECMDGOALS))
ifneq ($({MAKECMDGOALS}),)
$({MAKECMDGOALS}): $({OBJECTS}) ;
endif


else


# warn on the fall back to the predefined implicit rules (if a target file does not exist yet)
$(foreach {suffix},$({CXX_SOURCE_SUFFIXES}),$(eval %: %$({suffix}) ; $$(warning The implicit rule ($$@: $$^) is discarded.)))

# reject all other goals
%: ; $(warning Avoid the target '$@'.)


endif

