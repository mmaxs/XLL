# vim: ft=make
# makecmdgoals framework: Make common utility definitions
# copyright (c) 2018 Mikhail Usenko <michaelus@tochka.ru>


# don't try to rebuild this makefile
$(lastword $(MAKEFILE_LIST)):: ;

# the include guard preventing multiple inclusion
ifeq ($(words $(filter $(lastword $(MAKEFILE_LIST)),$(MAKEFILE_LIST))),1)


##### SPECIAL CHARACTERS

# (comma)
define , :=
,
endef

# (space)
define _ :=
 
endef

# (line-feed / new-line)
define \ :=


endef

# (left parenthesis)
define [ :=
(
endef
# (right parenthesis)
define ] :=
)
endef


##### FILENAME MANIPULATION

# (files which filenames (not paths) matching with patterns) <- ((filename matching patterns),(files))
# note:
# 	$(filter %,...) is used to strip/squeeze multiple spaces resulting from
# 	$(foreach ...) inserting the space between empty concatenated parts
define !filter-filename! =
$(filter %,$(foreach {file},$2,$(if $(filter $1,$(notdir $({file}))),$({file}))))
endef

# (files with replaced filenames (paths are not affected)) <- ((matching pattern in filenames),(replacement pattern),(files))
define !patsubst-filename! =
$(join $(dir $3),$(patsubst $1,$2,$(notdir $3)))
endef

# (nonexisting files that cause $(realpath) to fail) <- (files)
# note:
# 	$(filter %,...) is used to strip/squeeze multiple spaces resulting from
# 	$(foreach ...) inserting the space between empty concatenated parts
define !realpath-failure! =
$(filter %,$(foreach {file},$1,$(if $(realpath $({file})),,$({file}))))
endef

# (file patterns / nonexisting files that cause $(wildcard) to fail) <- (file wildcard patterns / files)
# note:
# 	file wildcard pattern can contain no shell file name pattern wildcard symbols,
# 	thus requesting for some particular files
# note:
# 	$(filter %,...) is used to strip/squeeze multiple spaces resulting from
# 	$(foreach ...) inserting the space between empty concatenated parts
define !wildcard-failure! =
$(filter %,$(foreach {file-pattern},$1,$(if $(wildcard $({file-pattern})),,$({file-pattern}))))
endef


##### TEXT AND WORD LIST MANIPULATION

# (the head element of the word list) <- (word list)
define !head! =
$(firstword $1)
endef
# (all but the first elements of the word list) <- (word list)
define !tail! =
$(wordlist 2,$(words $1),$1)
endef

# (the string made up of words merged with merge-delimiter) <- ((merge-delimiter),(word list))
define !merge! =
$(if $(strip $2),$(call !head!,$2)$(if $(call !tail!,$2),$1$(call $0,$1,$(call !tail!,$2))))
endef

# (word-by-word junctions through join-delimiter
# 	composed into a list with list-delimiter) <- ((list-delimiter),(join-delimiter),(first word list),(second word list))
define !join! =
$(if $(and $(strip $3),$(strip $4)),$(call !head!,$3)$2$(call !head!,$4)$(if \
	$(or $(call !tail!,$3),$(call !tail!,$4)),$1$(call \
		$0,$1,$2,$(call !tail!,$3),$(call !tail!,$4))),$(call !merge!,$1,$3$4))
endef

# (words with prefix added through join-delimiter
# 	composed into a list with list-delimiter) <- ((list-delimiter),(prefix join-delimiter),(prefix string),(word list))
define !add-prefix! =
$(if $(strip $4),$(if $3,$3$2)$(call !head!,$4)$(if \
	$(call !tail!,$4),$1$(call $0,$1,$2,$3,$(call !tail!,$4))))
endef
# (words with suffix added through join-delimiter
# 	composed into a list with list-delimiter) <- ((list-delimiter),(suffix join-delimiter),(suffix string),(word list))
define !add-suffix! =
$(if $(strip $4),$(call !head!,$4)$(if $3,$2$3)$(if \
	$(call !tail!,$4),$1$(call $0,$1,$2,$3,$(call !tail!,$4))))
endef

# (Cartesian product junctions through join-delimiter
# 	composed into a list with list-delimiter) <- ((list-delimiter),(join-delimiter),(first word list),(second word list))
# note:
# 	the version with no recursion, using $(foreach ...), and with a space as list-delimiter:
# 	$(if $(strip $3),$(foreach {word1},$3,$(if $(strip $4),$(foreach {word2},$4,$({word1})$2$({word2})),$({word1}))),$(filter %,$4))
define !cartesian! =
$(if \
	$(strip $4),$(call !add-prefix!,$1,$2,$(call !head!,$3),$4),$(call !head!,$3))$(if \
		$(call !tail!,$3),$1$(call $0,$1,$2,$(call !tail!,$3),$4))
endef

# (the text wherein each *substring* from word list 'FROM' substituted with corresponding word from list 'TO'
# 	that is expanded to length of 'FROM' by repeating its last word as necessary) <- ((text),(word list 'FROM'),(word list 'TO'))
define !tr! =
$(if \
	$(strip $2),$(call \
		$0,$(subst $(call !head!,$2),$(call !head!,$3),$1),$(call !tail!,$2),$(or $(call !tail!,$3),$(call !head!,$3))),$1)
endef

define !to-upper! =
$(call !tr!,$1,a b c d e f g h i j k l m n o p q r s t u v w x y z,A B C D E F G H I J K L M N O P Q R S T U V W X Y Z)
endef
define !to-lower! =
$(call !tr!,$1,A B C D E F G H I J K L M N O P Q R S T U V W X Y Z,a b c d e f g h i j k l m n o p q r s t u v w x y z)
endef

# (the words being put between the given quotation marks) <- ((quotation mark),(word list))
define !quote-words! =
$(foreach {word},$2,$1$({word})$1)
endef

# (word list without repetitions) <- (word list)
define !uniq! =
$(if $(strip $1),$(firstword $1)$(if $(filter-out $(firstword $1),$1), $(call $0,$(filter-out $(firstword $1),$1))))
endef


##### VARIABLE EQUALITY AND EXISTENCE

# (#t, if operands are char-by-char equal; empty otherwise) <- ($1,$2)
define !is-equal! =
$(if $(subst $1,,$2)$(subst $2,,$1),,#t)
endef

# (the name of the variable, if it is somehow defined (even being empty); empty otherwise) <- (variable name)
define !is-defined! =
$(if $(findstring undefined,$(origin $1)),,$1)
endef


##### map FUNCTIONS

# (the function results concatenated together with list-delimiter) <- ((list-delimiter),(function name),(word list)...)
define !map1! =
$(if \
	$(strip $3),$(call $2,$(call !head!,$3))$(if \
		$(call !tail!,$3),$1$(call \
			$0,$1,$2,$(call !tail!,$3))))
endef
define !map2! =
$(if \
	$(or $(strip $3),$(strip $4)),$(call $2,$(call !head!,$3),$(call !head!,$4))$(if \
		$(or $(call !tail!,$3),$(call !tail!,$4)),$1$(call \
			$0,$1,$2,$(call !tail!,$3),$(call !tail!,$4))))
endef


##### trace FUNCTION

# (void; 
# 	if Make's --trace option is on, call $(info ...) for each word formatted with output pattern) <- ((output pattern),(word list))
# note:
# 	${} (which shall be typed as $${} to escape $ from being evaluated by Make interpreter as a variable reference)
# 	in output pattern is substituted with the word from the list;
# 	e.g.: $(call !trace!,$${}=$$($${}),...)
define !trace! =
$(if $(findstring --trace,$(MAKEFLAGS)),$(strip $(foreach {word},$2,$(eval $$(info $(subst $${},$({word}),$1))))))
endef


endif
