# vim: ft=make
# makecmdgoals framework: static library creating
# copyright (c) 2018 Mikhail Usenko <michaelus@tochka.ru>


# don't try to rebuild this makefile
[ar2.makecmdgoals] := $(lastword $(MAKEFILE_LIST))
$([ar2.makecmdgoals]):: ;


# use common definitions
include $(join $(dir $([ar2.makecmdgoals])),framework.defs)
$(call !trace!,$$(\)[$$($${})],[ar2.makecmdgoals])


# no default goal
# (define it with recursively expanded assignment from any empty variable)
.DEFAULT_GOAL = $@
.PHONY: $(MAKECMDGOALS)


{AR_COMMAND} = $({AR}) $({ARFLAGS})

{AR_MEMBERS} = $({OBJECTS}) $({AREXTRAS})


$(call !trace!,$${}={$$($${})},{AR_MEMBERS})
############################################
ifneq ($(strip $({AR_MEMBERS})),)


AROUT ?= $(call !BUILD-PATHNAME!,$(call !patsubst-filename!,%,lib%.a,$(MAKECMDGOALS)))
$(call !trace!,$${}:={$$(value $${})},AROUT)


{AR_TARGETS} = $(addsuffix ($({AR_MEMBERS})),$({AROUT}))


{MAKECMDGOALS} = $(filter-out $({AR_TARGETS}),$(MAKECMDGOALS))
ifneq ($({MAKECMDGOALS}),)
$({MAKECMDGOALS}): $({AR_TARGETS}) ;
endif


# use secondary expansion to make target-specific and automatic variables
# used in rule prerequisites to be properly expanded
.SECONDEXPANSION:
$({AR_TARGETS}): $$([ar2.makecmdgoals])
$({AR_TARGETS}): $$% | $$(dir $$@)
	$(info $(\) *** ($@($%): $^))
	$({AR_COMMAND}) '$@'  '$%'


{BUILD_DIRS} = $(sort $(dir $({AROUT})))
$({BUILD_DIRS}):
	mkdir -p '$@'


# warn on the fall back to the predefined implicit rules (if a target file does not exist yet)
(%): % ; $(warning The implicit rule ($@($%): $^) is discarded.)


endif

